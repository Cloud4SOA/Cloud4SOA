/*
 *  Copyright 2013 Cloud4SOA, www.cloud4soa.eu
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


/* Generated By:JavaCC: Do not edit this line. CloudProfilesParserTokenManager.java */
package eu.cloud4soa.cli.profiles.grammar;
import eu.cloud4soa.cli.profiles.grammar.syntaxtree.*;
import eu.cloud4soa.cli.profiles.grammar.visitor.*;
import eu.cloud4soa.cli.profiles.grammar.syntaxtree.*;

/** Token Manager. */
public class CloudProfilesParserTokenManager implements CloudProfilesParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 25);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40041000100a00L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000004008000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x206020c0290000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x804000000080L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100100000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x22000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000008000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10800000540L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80210041000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8400000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 123:
         return jjStopAtPos(0, 23);
      case 125:
         return jjStopAtPos(0, 24);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008cc002400L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800020404080L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x9184100000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20402000019000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80040010100200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40018000000140L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000080400L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000040000800L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000410000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000001000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 105:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x402020010000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000040140L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080000200L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x25001300002000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200008024000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 120:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(2, 15);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4002000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x28304018000080L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000040000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000200L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200080000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x21020000800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000030000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000400040000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000900000400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000001000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000020400L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80002200040000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x44040000400340L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(4, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8001408080000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000004000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x830020000000L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x804003000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10400003000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40008000200L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000100L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800084000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20200000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x502100400800L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4200800000480L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x24000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000010000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1160100000200L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 33);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x40400000060100L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L);
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 50);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000080L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200800003000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x80400000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x44000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         return jjMoveStringLiteralDfa8_0(active0, 0x400080L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x110100000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 113:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         break;
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x860004000200L);
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 31);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(7, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 32);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 44);
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 104:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x870000000200L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         break;
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(8, 7);
         return jjMoveStringLiteralDfa9_0(active0, 0x444000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x64000L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x860000000200L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 47);
         return jjMoveStringLiteralDfa11_0(active0, 0x60000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x64000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x70000000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x44000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(12, 22);
         break;
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(12, 17);
         break;
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x44000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x44000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x44000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(15, 14);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(15, 18);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(15, 42);
         break;
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(19, 41);
         break;
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(19, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddTwoStates(27, 31);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(19);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7ffec8900000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 22:
                  if (curChar == 54 && kind > 56)
                     kind = 56;
                  break;
               case 23:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 52 && kind > 56)
                     kind = 56;
                  break;
               case 25:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(27, 31);
                  break;
               case 27:
                  if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(27);
                  break;
               case 29:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(27, 30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 40:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 27);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (curChar == 120)
                     jjAddStates(5, 6);
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 76 && kind > 52)
                     kind = 52;
                  break;
               case 7:
               case 9:
                  if (curChar == 80)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 68 && kind > 52)
                     kind = 52;
                  break;
               case 13:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 84 && kind > 52)
                     kind = 52;
                  break;
               case 16:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 21:
                  if (curChar == 120)
                     jjAddStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 28, 29, 23, 25, 19, 20, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\160\162\157\146\151\154\145", 
"\144\145\166\145\154\157\160\145\162", "\160\162\157\166\151\144\145\162", 
"\141\160\160\154\151\143\141\164\151\157\156", "\160\141\141\163\137\157\146\146\145\162\151\156\147", 
"\141\143\143\157\165\156\164", "\163\157\146\164\167\141\162\145", "\150\141\162\144\167\141\162\145", 
"\156\145\164\167\157\162\153\137\162\145\163\157\165\162\143\145", "\142\157\170", "\143\157\155\160\165\164\145", 
"\150\164\164\160\137\162\145\161\165\145\163\164\163", "\163\164\157\162\141\147\145\137\162\145\163\157\165\162\143\145", 
"\143\150\141\156\156\145\154\163", "\141\160\151", "\143\154\151", 
"\167\145\142\137\151\156\164\145\162\146\141\143\145", "\173", "\175", "\72", "\142\141\156\144\167\151\144\164\150", 
"\154\141\164\145\156\143\171", "\163\160\145\145\144", "\155\145\155\157\162\171", "\143\141\143\150\145", 
"\143\141\160\141\143\151\164\171", "\146\151\162\163\164\156\141\155\145", "\163\165\162\156\141\155\145", 
"\165\163\145\162\156\141\155\145", "\160\141\163\163\167\157\162\144", "\141\143\162\157\156\171\155", 
"\143\157\155\155\141\156\144", "\144\151\147\145\163\164", "\165\162\154", 
"\160\162\157\147\162\141\155\155\151\156\147\137\154\141\156\147\165\141\147\145", 
"\151\156\146\157\162\155\141\164\151\157\156\137\162\145\164\165\162\156\145\144", "\141\160\160\154\151\143\141\164\151\157\156\137\143\157\144\145", 
"\163\151\172\145", "\146\151\154\145\137\156\141\155\145", "\143\141\164\145\147\157\162\171", 
"\143\157\155\160\157\156\145\156\164", "\144\145\163\143\162\151\160\164\151\157\156", 
"\142\151\162\164\150\144\141\171", "\145\155\141\151\154", "\166\145\162\163\151\157\156", 
"\154\151\143\145\156\163\145", null, "\143\157\162\145\163", 
"\141\162\143\150\151\164\145\143\164\165\162\145", "\157\160\145\162\141\164\151\157\156", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[43];
static private final int[] jjstateSet = new int[86];
static protected char curChar;
/** Constructor. */
public CloudProfilesParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CloudProfilesParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
