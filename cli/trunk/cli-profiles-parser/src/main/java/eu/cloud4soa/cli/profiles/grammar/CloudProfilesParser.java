/*
 *  Copyright 2013 Cloud4SOA, www.cloud4soa.eu
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


/* Generated By:JavaCC: Do not edit this line. CloudProfilesParser.java */
package eu.cloud4soa.cli.profiles.grammar;

import eu.cloud4soa.cli.profiles.grammar.syntaxtree.*;
import eu.cloud4soa.cli.profiles.grammar.visitor.*;
import eu.cloud4soa.cli.profiles.grammar.syntaxtree.*;


public class CloudProfilesParser implements CloudProfilesParserConstants {

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    new CloudProfilesParser(System.in);
    try {
      Scope scope = CloudProfilesParser.Scope();
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public Scope Scope() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  UserProfile n5 = null;
  ApplicationProfile n6 = null;
  PaasOfferingProfile n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    n1 = jj_consume_token(PROFILE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEVELOPER:
    case PROVIDER:
      n5 = UserProfile();
        n4 = new NodeChoice(n5, 0, 3);
      break;
    case APPLICATION:
      n6 = ApplicationProfile();
        n4 = new NodeChoice(n6, 1, 3);
      break;
    case PAAS_OFFERING:
      n7 = PaasOfferingProfile();
        n4 = new NodeChoice(n7, 2, 3);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = jj_consume_token(RBRACE);
    n8 = JTBToolkit.makeNodeToken(n9);
    {if (true) return new Scope(n0, n2, n4, n8);}
    throw new Error("Missing return statement in function");
  }

  static final public UserProfile UserProfile() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Provider n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  AccountInfo n11 = null;
  PersonalInfos n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEVELOPER:
      n2 = jj_consume_token(DEVELOPER);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case PROVIDER:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(PROVIDER);
        n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(COLON);
        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
      n8 = Provider();
        n3.addNode(n8);
        n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n10 = jj_consume_token(LBRACE);
    n9 = JTBToolkit.makeNodeToken(n10);
    n11 = AccountInfo();
    n12 = PersonalInfos();
    n14 = jj_consume_token(RBRACE);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new UserProfile(n0, n9, n11, n12, n13);}
    throw new Error("Missing return statement in function");
  }

  static final public PersonalInfos PersonalInfos() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeOptional n18 = new NodeOptional();
  Birthday n19 = null;
    n1 = jj_consume_token(FIRSTNAME);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(SURNAME);
    n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(COLON);
    n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(STRING);
    n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(EMAIL);
    n12 = JTBToolkit.makeNodeToken(n13);
    n15 = jj_consume_token(COLON);
    n14 = JTBToolkit.makeNodeToken(n15);
    n17 = jj_consume_token(STRING);
    n16 = JTBToolkit.makeNodeToken(n17);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIRTHDAY:
      n19 = Birthday();
      n18.addNode(n19);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    {if (true) return new PersonalInfos(n0, n2, n4, n6, n8, n10, n12, n14, n16, n18);}
    throw new Error("Missing return statement in function");
  }

  static final public Birthday Birthday() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(BIRTHDAY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(DATE_US);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Birthday(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public AccountInfo AccountInfo() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(USERNAME);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(PASSWORD);
    n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(COLON);
    n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(STRING);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new AccountInfo(n0, n2, n4, n6, n8, n10);}
    throw new Error("Missing return statement in function");
  }

  static final public Provider Provider() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(STRING);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(URL);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(COLON);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(STRING);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new Provider(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public ApplicationProfile ApplicationProfile() throws ParseException {
  // --- JTB generated node declarations ---
  ApplicationInfos n0 = null;
  File n1 = null;
  TechnologyInfo n2 = null;
    n0 = ApplicationInfos();
    n1 = File();
    n2 = TechnologyInfo();
    {if (true) return new ApplicationProfile(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ApplicationInfos ApplicationInfos() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Version n6 = null;
  NodeOptional n7 = new NodeOptional();
  ApplicationCode n8 = null;
    n1 = jj_consume_token(APPLICATION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Version();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APPLICATION_CODE:
      n8 = ApplicationCode();
      n7.addNode(n8);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return new ApplicationInfos(n0, n2, n4, n6, n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ApplicationCode ApplicationCode() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(APPLICATION_CODE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new ApplicationCode(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public PaasOfferingProfile PaasOfferingProfile() throws ParseException {
  // --- JTB generated node declarations ---
  PaasOfferingInfos n0 = null;
  Channels n1 = null;
  TechnologyInfo n2 = null;
    n0 = PaasOfferingInfos();
    n1 = Channels();
    n2 = TechnologyInfo();
    {if (true) return new PaasOfferingProfile(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PaasOfferingInfos PaasOfferingInfos() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(PAAS_OFFERING);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new PaasOfferingInfos(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public File File() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  FileDimension n7 = null;
    n1 = jj_consume_token(FILE_NAME);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIZE:
      n7 = FileDimension();
      n6.addNode(n7);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return new File(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public FileDimension FileDimension() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  Digest n7 = null;
    n1 = jj_consume_token(SIZE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGEST:
      n7 = Digest();
      n6.addNode(n7);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return new FileDimension(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Digest Digest() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(DIGEST);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Digest(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public TechnologyInfo TechnologyInfo() throws ParseException {
  // --- JTB generated node declarations ---
  ProgrammingLanguage n0 = null;
  Software n1 = null;
  Hardware n2 = null;
    n0 = ProgrammingLanguage();
    n1 = Software();
    n2 = Hardware();
    {if (true) return new TechnologyInfo(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ProgrammingLanguage ProgrammingLanguage() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Version n6 = null;
    n1 = jj_consume_token(PROGRAMMING_LANGUAGE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Version();
    {if (true) return new ProgrammingLanguage(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Software Software() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  NodeSequence n5 = null;
  SoftwareCategory n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeList n9 = null;
  SoftwareComponent n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(SOFTWARE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_1:
    while (true) {
      n9 = new NodeList();
      n5 = new NodeSequence(4);
      n6 = SoftwareCategory();
      n5.addNode(n6);
      n8 = jj_consume_token(LBRACE);
      n7 = JTBToolkit.makeNodeToken(n8);
      n5.addNode(n7);
      label_2:
      while (true) {
        n10 = SoftwareComponent();
        n9.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMPONENT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
      }
      n9.nodes.trimToSize();
      n5.addNode(n9);
      n12 = jj_consume_token(RBRACE);
      n11 = JTBToolkit.makeNodeToken(n12);
      n5.addNode(n11);
      n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATEGORY:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
    }
    n4.nodes.trimToSize();
    n14 = jj_consume_token(RBRACE);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new Software(n0, n2, n4, n13);}
    throw new Error("Missing return statement in function");
  }

  static final public SoftwareCategory SoftwareCategory() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Description n6 = null;
    n1 = jj_consume_token(CATEGORY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Description();
    {if (true) return new SoftwareCategory(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public SoftwareComponent SoftwareComponent() throws ParseException {
  // --- JTB generated node declarations ---
  Component n0 = null;
  Version n1 = null;
  NodeOptional n2 = new NodeOptional();
  License n3 = null;
    n0 = Component();
    n1 = Version();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LICENSE:
      n3 = License();
      n2.addNode(n3);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return new SoftwareComponent(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Component Component() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Description n6 = null;
    n1 = jj_consume_token(COMPONENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Description();
    {if (true) return new Component(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Description Description() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(DESCRIPTION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Description(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public License License() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(LICENSE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LICENSE_TYPE);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new License(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Hardware Hardware() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeChoice n5 = null;
  Box n6 = null;
  Compute n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  NetworkResource n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  StorageResource n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
    n1 = jj_consume_token(HARDWARE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOX:
    case COMPUTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOX:
        n6 = Box();
        n5 = new NodeChoice(n6, 0, 2);
        break;
      case COMPUTE:
        n7 = Compute();
        n5 = new NodeChoice(n7, 1, 2);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n4.addNode(n5);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NETWORK_RESOURCE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      n9 = NetworkResource();
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORAGE_RESOURCE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      n11 = StorageResource();
      n10.addNode(n11);
    }
    n10.nodes.trimToSize();
    n13 = jj_consume_token(RBRACE);
    n12 = JTBToolkit.makeNodeToken(n13);
    {if (true) return new Hardware(n0, n2, n4, n8, n10, n12);}
    throw new Error("Missing return statement in function");
  }

  static final public Box Box() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  BoxComponent n2 = null;
    n1 = jj_consume_token(BOX);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = BoxComponent();
    {if (true) return new Box(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public BoxComponent BoxComponent() throws ParseException {
  // --- JTB generated node declarations ---
  Component n0 = null;
  HttpRequests n1 = null;
    n0 = Component();
    n1 = HttpRequests();
    {if (true) return new BoxComponent(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  static final public HttpRequests HttpRequests() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(HTTP_REQUESTS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new HttpRequests(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Compute Compute() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ComputationalComponent n2 = null;
    n1 = jj_consume_token(COMPUTE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ComputationalComponent();
    {if (true) return new Compute(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ComputationalComponent ComputationalComponent() throws ParseException {
  // --- JTB generated node declarations ---
  Component n0 = null;
  Architecture n1 = null;
  Cores n2 = null;
  Speed n3 = null;
  Memory n4 = null;
  Cache n5 = null;
    n0 = Component();
    n1 = Architecture();
    n2 = Cores();
    n3 = Speed();
    n4 = Memory();
    n5 = Cache();
    {if (true) return new ComputationalComponent(n0, n1, n2, n3, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Architecture Architecture() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(ARCHITECTURE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ARCHITECTURE_VALUE);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Architecture(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Cores Cores() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(CORES);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Cores(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Speed Speed() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(SPEED);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Speed(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Memory Memory() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(MEMORY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Memory(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Cache Cache() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(CACHE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Cache(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public NetworkResource NetworkResource() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  CommunicationalComponent n2 = null;
    n1 = jj_consume_token(NETWORK_RESOURCE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = CommunicationalComponent();
    {if (true) return new NetworkResource(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CommunicationalComponent CommunicationalComponent() throws ParseException {
  // --- JTB generated node declarations ---
  Component n0 = null;
  Bandwidth n1 = null;
  NodeOptional n2 = new NodeOptional();
  Latency n3 = null;
    n0 = Component();
    n1 = Bandwidth();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LATENCY:
      n3 = Latency();
      n2.addNode(n3);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    {if (true) return new CommunicationalComponent(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Bandwidth Bandwidth() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(BANDWIDTH);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Bandwidth(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Latency Latency() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(LATENCY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Latency(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public StorageResource StorageResource() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  StorageComponent n2 = null;
    n1 = jj_consume_token(STORAGE_RESOURCE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StorageComponent();
    {if (true) return new StorageResource(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public StorageComponent StorageComponent() throws ParseException {
  // --- JTB generated node declarations ---
  Component n0 = null;
  Capacity n1 = null;
  NodeOptional n2 = new NodeOptional();
  Bandwidth n3 = null;
    n0 = Component();
    n1 = Capacity();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANDWIDTH:
      n3 = Bandwidth();
      n2.addNode(n3);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    {if (true) return new StorageComponent(n0, n1, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Capacity Capacity() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(CAPACITY);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(NATURAL_NUMBER);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Capacity(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Channels Channels() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  Api n5 = null;
  NodeOptional n6 = new NodeOptional();
  Cli n7 = null;
  NodeOptional n8 = new NodeOptional();
  WebInterface n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(CHANNELS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case API:
      n5 = Api();
      n4.addNode(n5);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLI:
      n7 = Cli();
      n6.addNode(n7);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WebInterface:
      n9 = WebInterface();
      n8.addNode(n9);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    n11 = jj_consume_token(RBRACE);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new Channels(n0, n2, n4, n6, n8, n10);}
    throw new Error("Missing return statement in function");
  }

  static final public Api Api() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Operation n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(API);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATION:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      n5 = Operation();
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n7 = jj_consume_token(RBRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new Api(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Cli Cli() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Operation n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(CLI);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATION:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      n5 = Operation();
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n7 = jj_consume_token(RBRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new Cli(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public WebInterface WebInterface() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Operation n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(WebInterface);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LBRACE);
    n2 = JTBToolkit.makeNodeToken(n3);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATION:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      n5 = Operation();
      n4.addNode(n5);
    }
    n4.nodes.trimToSize();
    n7 = jj_consume_token(RBRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new WebInterface(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Operation Operation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Description n6 = null;
  Command n7 = null;
  InformationReturned n8 = null;
    n1 = jj_consume_token(OPERATION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Description();
    n7 = Command();
    n8 = InformationReturned();
    {if (true) return new Operation(n0, n2, n4, n6, n7, n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Command Command() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(COMMAND);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Command(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public InformationReturned InformationReturned() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(INFORMATION_RETURNED);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new InformationReturned(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Version Version() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(VERSION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(FLOATING_POINT);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new Version(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CloudProfilesParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x780,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x4000,0x40000,0x8000000,0x4000000,0x100000,0x200000,0x400000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10000,0x400,0x800,0x40,0x4000,0x2000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x800000,};
   }

  /** Constructor with InputStream. */
  public CloudProfilesParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CloudProfilesParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CloudProfilesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CloudProfilesParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CloudProfilesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CloudProfilesParser(CloudProfilesParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CloudProfilesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
