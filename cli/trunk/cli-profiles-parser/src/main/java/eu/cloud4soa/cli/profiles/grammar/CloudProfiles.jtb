options{  JDK_VERSION = "1.6";  static = true;}PARSER_BEGIN(CloudProfilesParser)package eu.cloud4soa.cli.profiles.grammar;
import eu.cloud4soa.cli.profiles.grammar.syntaxtree.*;import eu.cloud4soa.cli.profiles.grammar.visitor.*;
public class CloudProfilesParser{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new CloudProfilesParser(System.in);    try    {      Scope scope = CloudProfilesParser.Scope();      //DepthFirstVoidVisitor v = new MyVisitor();      //scope.accept(v);    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(CloudProfilesParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >}TOKEN : /* LITERALS */{ <PROFILE : "profile" >
| < DEVELOPER : "developer" >
| < PROVIDER : "provider" >| < APPLICATION : "application" >| < PAAS_OFFERING : "paas_offering" >| < ACCOUNT : "account" >
| < SOFTWARE : "software" >
| < HARDWARE : "hardware" >
| < NETWORK_RESOURCE : "network_resource" >
| < BOX : "box" >
| < COMPUTE : "compute" >| < HTTP_REQUESTS : "http_requests">
| < STORAGE_RESOURCE : "storage_resource" >| < CHANNELS : "channels" >| < API : "api" >| < CLI : "cli" >| < WebInterface : "web_interface" >| < LBRACE : "{" >| < RBRACE : "}" >| < COLON : ":" >| < BANDWIDTH : "bandwidth" > //KB| < LATENCY : "latency" > //ms| < SPEED : "speed" > | < MEMORY : "memory" > //KB| < CACHE : "cache" > //KB| < CAPACITY : "capacity" >| < FIRSTNAME : "firstname" > | < SURNAME : "surname" > | < USERNAME : "username" > | < PASSWORD : "password" >| < ACRONYM : "acronym" >| < COMMAND : "command" >| < DIGEST : "digest" >| < URL : "url" >| < PROGRAMMING_LANGUAGE : "programming_language" >| < INFORMATION_RETURNED : "information_returned" >| < APPLICATION_CODE : "application_code" >| < SIZE : "size" > //Byte| < FILE_NAME : "file_name" >| < CATEGORY : "category" > | < COMPONENT : "component" >| < DESCRIPTION : "description" >| < BIRTHDAY : "birthday" >| < EMAIL : "email" >| < VERSION : "version" >| < LICENSE : "license" >| < LICENSE_TYPE : ( "GPL" | "LGPL" | "BSD" | "MIT" ) >| < CORES : "cores" >| < ARCHITECTURE : "architecture" >| < OPERATION : "operation">| < ARCHITECTURE_VALUE : ( "x86" | "x64" ) >| < FLOATING_POINT : < NATURAL_NUMBER > ( "." < NATURAL_NUMBER > )+ >| < NATURAL_NUMBER : ( ["0"-"9"] | ["1"-"9"] ( ["0"-"9"] )+ ) >| < DATE_US : ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] "-" ["0"-"9"] ["0"-"9"] "-" ["0"-"9"] ["0"-"9"] >| < STRING : "\"" ( ["A"-"Z","a"-"z","0"-"9","_","\'",".",":","-","+","#","*"," ","@","/"] )+ "\"" >}void Scope() :{}{
  < PROFILE > < LBRACE > ( UserProfile() | ApplicationProfile() | PaasOfferingProfile() ) < RBRACE >}void UserProfile() :{}{
 ( < DEVELOPER > | < PROVIDER > < COLON > Provider() ) < LBRACE > AccountInfo() PersonalInfos() < RBRACE >}void PersonalInfos() :{}{
  < FIRSTNAME > < COLON > < STRING > < SURNAME > < COLON > < STRING > < EMAIL > < COLON > < STRING > ( Birthday() )?}void Birthday() :{}{  < BIRTHDAY > < COLON > < DATE_US >}void AccountInfo() :{}{  < USERNAME > < COLON > < STRING > < PASSWORD > < COLON > < STRING > }void Provider() :{}{  < STRING > <URL> <COLON> < STRING >}void ApplicationProfile() :{}{  ApplicationInfos() File() TechnologyInfo()}void ApplicationInfos() :{}{  < APPLICATION > < COLON > < STRING > Version() ( ApplicationCode() )?}void ApplicationCode() :{}{  < APPLICATION_CODE > < COLON > < STRING >}void PaasOfferingProfile() :{}{  PaasOfferingInfos() Channels() TechnologyInfo()}void PaasOfferingInfos() :{}{  < PAAS_OFFERING > < COLON > < STRING >}void File() :{}{  < FILE_NAME > < COLON > < STRING > ( FileDimension() )?}void FileDimension() :{}{  < SIZE > < COLON > < NATURAL_NUMBER > ( Digest() )?}void Digest() :{}{  < DIGEST > < COLON > < STRING >}void TechnologyInfo() :{}{  ProgrammingLanguage() Software() Hardware()}void ProgrammingLanguage() :{}{  < PROGRAMMING_LANGUAGE > < COLON > < STRING > Version()}void Software() :{}{  < SOFTWARE > < LBRACE > (SoftwareCategory() < LBRACE > ( SoftwareComponent() )+ < RBRACE > )+ < RBRACE >}void SoftwareCategory() :{}{  < CATEGORY > < COLON > < STRING > Description()}void SoftwareComponent() :{}{  Component() Version() (License())?}void Component() :{}{  < COMPONENT > < COLON > < STRING > Description()}void Description() :{}{  < DESCRIPTION > < COLON > < STRING >}void License() :{}{  < LICENSE > < COLON > < LICENSE_TYPE >}void Hardware() :{}{  < HARDWARE > < LBRACE > ( Box() | Compute() )? ( NetworkResource() )* ( StorageResource() )* < RBRACE >}void Box() :{}{  < BOX > BoxComponent()}void BoxComponent() :{}{  Component() HttpRequests()}void HttpRequests() :{}{  < HTTP_REQUESTS > < COLON > < NATURAL_NUMBER >}void Compute() :{}{  < COMPUTE > ComputationalComponent()}void ComputationalComponent() :{}{  Component() Architecture() Cores() Speed() Memory() Cache()}void Architecture() :{}{  < ARCHITECTURE > < COLON > < ARCHITECTURE_VALUE >}void Cores() :{}{  < CORES > < COLON > < NATURAL_NUMBER > }void Speed() :{}{  < SPEED > < COLON > < NATURAL_NUMBER >}void Memory() :{}{  < MEMORY > < COLON > < NATURAL_NUMBER >}void Cache() :{}{  < CACHE > < COLON > < NATURAL_NUMBER >}void NetworkResource() :{}{  < NETWORK_RESOURCE > CommunicationalComponent()}void CommunicationalComponent() :{}{  Component() Bandwidth() ( Latency() )?}void Bandwidth() :{}{  < BANDWIDTH > < COLON > < NATURAL_NUMBER >}void Latency() :{}{  < LATENCY > < COLON > < NATURAL_NUMBER >}void StorageResource() :{}{  < STORAGE_RESOURCE > StorageComponent()}void StorageComponent() :{}{  Component() Capacity() ( Bandwidth() )?}void Capacity() :{}{  < CAPACITY > < COLON > < NATURAL_NUMBER >}void Channels() :{}{  < CHANNELS > < LBRACE > ( Api() )? ( Cli() )? ( WebInterface() )? < RBRACE >}void Api() :{}{  < API > < LBRACE > ( Operation() )* < RBRACE >}void Cli() :{}{  < CLI > < LBRACE > ( Operation() )* < RBRACE >}void WebInterface() :{}{  < WebInterface > < LBRACE > ( Operation() )* < RBRACE >}void Operation() :{}{  < OPERATION > < COLON > < STRING > Description() Command() InformationReturned()}void Command() :{}{  < COMMAND > < COLON > < STRING >}void InformationReturned() :{}{  < INFORMATION_RETURNED > < COLON > <STRING >}
void Version() :{}{  < VERSION > < COLON > < FLOATING_POINT >}